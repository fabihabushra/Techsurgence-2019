
BUP 2019.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00000e8a  00000f1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800154  00800154  00001012  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ba  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008aa  00000000  00000000  000026e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ef  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  0000387c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  00003aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f6  00000000  00000000  00003fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000048d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 35       	cpi	r26, 0x54	; 84
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e5       	ldi	r26, 0x54	; 84
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 03 	call	0x70a	; 0x70a <main>
  8a:	0c 94 43 07 	jmp	0xe86	; 0xe86 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initADC>:
	motor(0,0);
}

void reverseGear(void)
{
	motor(-revSpeed, -revSpeed);
  92:	86 b1       	in	r24, 0x06	; 6
  94:	87 60       	ori	r24, 0x07	; 7
  96:	86 b9       	out	0x06, r24	; 6
  98:	3e 9a       	sbi	0x07, 6	; 7
  9a:	3d 98       	cbi	0x07, 5	; 7
  9c:	37 9a       	sbi	0x06, 7	; 6
  9e:	36 9a       	sbi	0x06, 6	; 6
  a0:	08 95       	ret

000000a2 <readADC>:
  a2:	97 b1       	in	r25, 0x07	; 7
  a4:	90 7f       	andi	r25, 0xF0	; 240
  a6:	97 b9       	out	0x07, r25	; 7
  a8:	97 b1       	in	r25, 0x07	; 7
  aa:	89 2b       	or	r24, r25
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	36 9a       	sbi	0x06, 6	; 6
  b0:	36 99       	sbic	0x06, 6	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <readADC+0xe>
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	25 b1       	in	r18, 0x05	; 5
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	92 2b       	or	r25, r18
  bc:	08 95       	ret

000000be <initPWM>:
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	85 bd       	out	0x25, r24	; 37
  c2:	81 e6       	ldi	r24, 0x61	; 97
  c4:	83 bf       	out	0x33, r24	; 51
  c6:	8f b5       	in	r24, 0x2f	; 47
  c8:	81 68       	ori	r24, 0x81	; 129
  ca:	8f bd       	out	0x2f, r24	; 47
  cc:	8e b5       	in	r24, 0x2e	; 46
  ce:	89 60       	ori	r24, 0x09	; 9
  d0:	8e bd       	out	0x2e, r24	; 46
  d2:	8f b5       	in	r24, 0x2f	; 47
  d4:	81 62       	ori	r24, 0x21	; 33
  d6:	8f bd       	out	0x2f, r24	; 47
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	89 60       	ori	r24, 0x09	; 9
  dc:	8e bd       	out	0x2e, r24	; 46
  de:	08 95       	ret

000000e0 <initUSART>:
  e0:	10 bc       	out	0x20, r1	; 32
  e2:	89 e1       	ldi	r24, 0x19	; 25
  e4:	89 b9       	out	0x09, r24	; 9
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	88 61       	ori	r24, 0x18	; 24
  ea:	8a b9       	out	0x0a, r24	; 10
  ec:	80 b5       	in	r24, 0x20	; 32
  ee:	8e 68       	ori	r24, 0x8E	; 142
  f0:	80 bd       	out	0x20, r24	; 32
  f2:	08 95       	ret

000000f4 <transData>:
  f4:	5d 9b       	sbis	0x0b, 5	; 11
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <transData>
  f8:	8c b9       	out	0x0c, r24	; 12
  fa:	08 95       	ret

000000fc <serialPrintStr>:
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	8c 01       	movw	r16, r24
 10a:	7c 01       	movw	r14, r24
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	d0 e0       	ldi	r29, 0x00	; 0
 110:	06 c0       	rjmp	.+12     	; 0x11e <serialPrintStr+0x22>
 112:	f7 01       	movw	r30, r14
 114:	81 91       	ld	r24, Z+
 116:	7f 01       	movw	r14, r30
 118:	0e 94 7a 00 	call	0xf4	; 0xf4 <transData>
 11c:	21 96       	adiw	r28, 0x01	; 1
 11e:	f8 01       	movw	r30, r16
 120:	01 90       	ld	r0, Z+
 122:	00 20       	and	r0, r0
 124:	e9 f7       	brne	.-6      	; 0x120 <serialPrintStr+0x24>
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	e0 1b       	sub	r30, r16
 12a:	f1 0b       	sbc	r31, r17
 12c:	ce 17       	cp	r28, r30
 12e:	df 07       	cpc	r29, r31
 130:	80 f3       	brcs	.-32     	; 0x112 <serialPrintStr+0x16>
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	08 95       	ret

00000140 <serialPrintInt>:
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	2a 97       	sbiw	r28, 0x0a	; 10
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	4a e0       	ldi	r20, 0x0A	; 10
 156:	be 01       	movw	r22, r28
 158:	6f 5f       	subi	r22, 0xFF	; 255
 15a:	7f 4f       	sbci	r23, 0xFF	; 255
 15c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__itoa_ncheck>
 160:	ce 01       	movw	r24, r28
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
 168:	2a 96       	adiw	r28, 0x0a	; 10
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <sensorMapping>:
 17a:	7f 92       	push	r7
 17c:	8f 92       	push	r8
 17e:	9f 92       	push	r9
 180:	af 92       	push	r10
 182:	bf 92       	push	r11
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	00 e8       	ldi	r16, 0x80	; 128
 196:	11 e0       	ldi	r17, 0x01	; 1
 198:	0f 2e       	mov	r0, r31
 19a:	f6 e6       	ldi	r31, 0x66	; 102
 19c:	8f 2e       	mov	r8, r31
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	9f 2e       	mov	r9, r31
 1a2:	f0 2d       	mov	r31, r0
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	71 2c       	mov	r7, r1
 1aa:	e1 2c       	mov	r14, r1
 1ac:	f1 2c       	mov	r15, r1
 1ae:	c1 2c       	mov	r12, r1
 1b0:	d1 2c       	mov	r13, r1
 1b2:	aa 24       	eor	r10, r10
 1b4:	a3 94       	inc	r10
 1b6:	b1 2c       	mov	r11, r1
 1b8:	87 2d       	mov	r24, r7
 1ba:	0e 94 51 00 	call	0xa2	; 0xa2 <readADC>
 1be:	f8 01       	movw	r30, r16
 1c0:	21 91       	ld	r18, Z+
 1c2:	31 91       	ld	r19, Z+
 1c4:	8f 01       	movw	r16, r30
 1c6:	82 17       	cp	r24, r18
 1c8:	93 07       	cpc	r25, r19
 1ca:	48 f4       	brcc	.+18     	; 0x1de <sensorMapping+0x64>
 1cc:	cc 0e       	add	r12, r28
 1ce:	dd 1e       	adc	r13, r29
 1d0:	ff ef       	ldi	r31, 0xFF	; 255
 1d2:	ef 1a       	sub	r14, r31
 1d4:	ff 0a       	sbc	r15, r31
 1d6:	f4 01       	movw	r30, r8
 1d8:	b1 82       	std	Z+1, r11	; 0x01
 1da:	a0 82       	st	Z, r10
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <sensorMapping+0x6a>
 1de:	f4 01       	movw	r30, r8
 1e0:	11 82       	std	Z+1, r1	; 0x01
 1e2:	10 82       	st	Z, r1
 1e4:	73 94       	inc	r7
 1e6:	22 96       	adiw	r28, 0x02	; 2
 1e8:	f2 e0       	ldi	r31, 0x02	; 2
 1ea:	8f 0e       	add	r8, r31
 1ec:	91 1c       	adc	r9, r1
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	78 12       	cpse	r7, r24
 1f2:	e2 cf       	rjmp	.-60     	; 0x1b8 <sensorMapping+0x3e>
 1f4:	e1 14       	cp	r14, r1
 1f6:	f1 04       	cpc	r15, r1
 1f8:	49 f0       	breq	.+18     	; 0x20c <sensorMapping+0x92>
 1fa:	c6 01       	movw	r24, r12
 1fc:	b7 01       	movw	r22, r14
 1fe:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__divmodhi4>
 202:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <mappedValue+0x1>
 206:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <mappedValue>
 20a:	06 c0       	rjmp	.+12     	; 0x218 <sensorMapping+0x9e>
 20c:	84 e6       	ldi	r24, 0x64	; 100
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <mappedValue+0x1>
 214:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <mappedValue>
 218:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <digitalReading>
 21c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <digitalReading+0x1>
 220:	00 97       	sbiw	r24, 0x00	; 0
 222:	31 f4       	brne	.+12     	; 0x230 <sensorMapping+0xb6>
 224:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <digitalReading+0xe>
 228:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <digitalReading+0xf>
 22c:	23 2b       	or	r18, r19
 22e:	89 f0       	breq	.+34     	; 0x252 <sensorMapping+0xd8>
 230:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <left+0x1>
 234:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <left>
 238:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <digitalReading+0xe>
 23c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <digitalReading+0xf>
 240:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <right+0x1>
 244:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <right>
 248:	80 e7       	ldi	r24, 0x70	; 112
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
 250:	1c c0       	rjmp	.+56     	; 0x28a <sensorMapping+0x110>
 252:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <mappedValue>
 256:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <mappedValue+0x1>
 25a:	84 36       	cpi	r24, 0x64	; 100
 25c:	91 05       	cpc	r25, r1
 25e:	a9 f0       	breq	.+42     	; 0x28a <sensorMapping+0x110>
 260:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <left>
 264:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <left+0x1>
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	31 f0       	breq	.+12     	; 0x278 <sensorMapping+0xfe>
 26c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <right>
 270:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <right+0x1>
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	49 f4       	brne	.+18     	; 0x28a <sensorMapping+0x110>
 278:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <extremeCounter>
 27c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <extremeCounter+0x1>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <extremeCounter+0x1>
 286:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <extremeCounter>
 28a:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <extremeCounter>
 28e:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <extremeCounter+0x1>
 292:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <extremeTrigger>
 296:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <extremeTrigger+0x1>
 29a:	82 17       	cp	r24, r18
 29c:	93 07       	cpc	r25, r19
 29e:	84 f4       	brge	.+32     	; 0x2c0 <sensorMapping+0x146>
 2a0:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <left+0x1>
 2a4:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <left>
 2a8:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <right+0x1>
 2ac:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <right>
 2b0:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <extremeCounter+0x1>
 2b4:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <extremeCounter>
 2b8:	80 e8       	ldi	r24, 0x80	; 128
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
 2c0:	e8 e0       	ldi	r30, 0x08	; 8
 2c2:	ee 16       	cp	r14, r30
 2c4:	f1 04       	cpc	r15, r1
 2c6:	51 f4       	brne	.+20     	; 0x2dc <sensorMapping+0x162>
 2c8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 2cc:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x1>
 2d6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <sensorMapping+0x16a>
 2dc:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__data_end+0x1>
 2e0:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	df 90       	pop	r13
 2f2:	cf 90       	pop	r12
 2f4:	bf 90       	pop	r11
 2f6:	af 90       	pop	r10
 2f8:	9f 90       	pop	r9
 2fa:	8f 90       	pop	r8
 2fc:	7f 90       	pop	r7
 2fe:	08 95       	ret

00000300 <pid>:
 300:	8f 92       	push	r8
 302:	9f 92       	push	r9
 304:	af 92       	push	r10
 306:	bf 92       	push	r11
 308:	cf 92       	push	r12
 30a:	df 92       	push	r13
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <targetValue>
 314:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <targetValue+0x1>
 318:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <mappedValue>
 31c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <mappedValue+0x1>
 320:	68 1b       	sub	r22, r24
 322:	79 0b       	sbc	r23, r25
 324:	07 2e       	mov	r0, r23
 326:	00 0c       	add	r0, r0
 328:	88 0b       	sbc	r24, r24
 32a:	99 0b       	sbc	r25, r25
 32c:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
 330:	6b 01       	movw	r12, r22
 332:	7c 01       	movw	r14, r24
 334:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <error>
 338:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <error+0x1>
 33c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <error+0x2>
 340:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <error+0x3>
 344:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <prevError>
 348:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <prevError+0x1>
 34c:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <prevError+0x2>
 350:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <prevError+0x3>
 354:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__subsf3>
 358:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <kd>
 35c:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <kd+0x1>
 360:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <kd+0x2>
 364:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <kd+0x3>
 368:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 36c:	4b 01       	movw	r8, r22
 36e:	5c 01       	movw	r10, r24
 370:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <kp>
 374:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <kp+0x1>
 378:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <kp+0x2>
 37c:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <kp+0x3>
 380:	c7 01       	movw	r24, r14
 382:	b6 01       	movw	r22, r12
 384:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 388:	9b 01       	movw	r18, r22
 38a:	ac 01       	movw	r20, r24
 38c:	c5 01       	movw	r24, r10
 38e:	b4 01       	movw	r22, r8
 390:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
 394:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <correction>
 398:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <correction+0x1>
 39c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <correction+0x2>
 3a0:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <correction+0x3>
 3a4:	c0 92 58 01 	sts	0x0158, r12	; 0x800158 <prevError>
 3a8:	d0 92 59 01 	sts	0x0159, r13	; 0x800159 <prevError+0x1>
 3ac:	e0 92 5a 01 	sts	0x015A, r14	; 0x80015a <prevError+0x2>
 3b0:	f0 92 5b 01 	sts	0x015B, r15	; 0x80015b <prevError+0x3>
 3b4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fixsfsi>
 3b8:	9b 01       	movw	r18, r22
 3ba:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <motorResponse+0x1>
 3be:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <motorResponse>
 3c2:	6f 3f       	cpi	r22, 0xFF	; 255
 3c4:	71 05       	cpc	r23, r1
 3c6:	51 f0       	breq	.+20     	; 0x3dc <pid+0xdc>
 3c8:	4c f0       	brlt	.+18     	; 0x3dc <pid+0xdc>
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <motorResponse+0x1>
 3d2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <motorResponse>
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	13 c0       	rjmp	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3dc:	21 30       	cpi	r18, 0x01	; 1
 3de:	3f 4f       	sbci	r19, 0xFF	; 255
 3e0:	4c f4       	brge	.+18     	; 0x3f4 <pid+0xf4>
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	9f ef       	ldi	r25, 0xFF	; 255
 3e6:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <motorResponse+0x1>
 3ea:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <motorResponse>
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	3f ef       	ldi	r19, 0xFF	; 255
 3f2:	16 c0       	rjmp	.+44     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f4:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <motorResponse>
 3f8:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <motorResponse+0x1>
 3fc:	12 16       	cp	r1, r18
 3fe:	13 06       	cpc	r1, r19
 400:	6c f4       	brge	.+26     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <rightSpeed+0x1>
 40a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rightSpeed>
 40e:	82 1b       	sub	r24, r18
 410:	93 0b       	sbc	r25, r19
 412:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <leftSpeed+0x1>
 416:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <leftSpeed>
 41a:	19 c0       	rjmp	.+50     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 41c:	33 23       	and	r19, r19
 41e:	6c f4       	brge	.+26     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 420:	21 50       	subi	r18, 0x01	; 1
 422:	3f 4f       	sbci	r19, 0xFF	; 255
 424:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <rightSpeed+0x1>
 428:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <rightSpeed>
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <leftSpeed+0x1>
 434:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <leftSpeed>
 438:	0a c0       	rjmp	.+20     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 43a:	88 ec       	ldi	r24, 0xC8	; 200
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <leftSpeed+0x1>
 442:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <leftSpeed>
 446:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <rightSpeed+0x1>
 44a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rightSpeed>
 44e:	ff 90       	pop	r15
 450:	ef 90       	pop	r14
 452:	df 90       	pop	r13
 454:	cf 90       	pop	r12
 456:	bf 90       	pop	r11
 458:	af 90       	pop	r10
 45a:	9f 90       	pop	r9
 45c:	8f 90       	pop	r8
 45e:	08 95       	ret

00000460 <motorBalance>:
 460:	bc 01       	movw	r22, r24
 462:	99 0f       	add	r25, r25
 464:	88 0b       	sbc	r24, r24
 466:	99 0b       	sbc	r25, r25
 468:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
 46c:	23 ed       	ldi	r18, 0xD3	; 211
 46e:	3e ed       	ldi	r19, 0xDE	; 222
 470:	40 e4       	ldi	r20, 0x40	; 64
 472:	5f e3       	ldi	r21, 0x3F	; 63
 474:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 478:	23 e3       	ldi	r18, 0x33	; 51
 47a:	33 e3       	ldi	r19, 0x33	; 51
 47c:	47 ee       	ldi	r20, 0xE7	; 231
 47e:	51 e4       	ldi	r21, 0x41	; 65
 480:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
 484:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fixsfsi>
 488:	cb 01       	movw	r24, r22
 48a:	08 95       	ret

0000048c <motor>:
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	eb 01       	movw	r28, r22
 492:	18 16       	cp	r1, r24
 494:	19 06       	cpc	r1, r25
 496:	1c f4       	brge	.+6      	; 0x49e <motor+0x12>
 498:	0e 94 30 02 	call	0x460	; 0x460 <motorBalance>
 49c:	08 c0       	rjmp	.+16     	; 0x4ae <motor+0x22>
 49e:	91 95       	neg	r25
 4a0:	81 95       	neg	r24
 4a2:	91 09       	sbc	r25, r1
 4a4:	0e 94 30 02 	call	0x460	; 0x460 <motorBalance>
 4a8:	91 95       	neg	r25
 4aa:	81 95       	neg	r24
 4ac:	91 09       	sbc	r25, r1
 4ae:	1c 16       	cp	r1, r28
 4b0:	1d 06       	cpc	r1, r29
 4b2:	24 f4       	brge	.+8      	; 0x4bc <motor+0x30>
 4b4:	cc bf       	out	0x3c, r28	; 60
 4b6:	19 bc       	out	0x29, r1	; 41
 4b8:	18 bc       	out	0x28, r1	; 40
 4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <motor+0x3c>
 4bc:	1c be       	out	0x3c, r1	; 60
 4be:	d1 95       	neg	r29
 4c0:	c1 95       	neg	r28
 4c2:	d1 09       	sbc	r29, r1
 4c4:	d9 bd       	out	0x29, r29	; 41
 4c6:	c8 bd       	out	0x28, r28	; 40
 4c8:	18 16       	cp	r1, r24
 4ca:	19 06       	cpc	r1, r25
 4cc:	24 f4       	brge	.+8      	; 0x4d6 <motor+0x4a>
 4ce:	9b bd       	out	0x2b, r25	; 43
 4d0:	8a bd       	out	0x2a, r24	; 42
 4d2:	13 bc       	out	0x23, r1	; 35
 4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <motor+0x56>
 4d6:	1b bc       	out	0x2b, r1	; 43
 4d8:	1a bc       	out	0x2a, r1	; 42
 4da:	91 95       	neg	r25
 4dc:	81 95       	neg	r24
 4de:	91 09       	sbc	r25, r1
 4e0:	83 bd       	out	0x23, r24	; 35
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <plannedCRotate>:
 4e8:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <leftSpeed+0x1>
 4ec:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <leftSpeed>
 4f0:	66 27       	eor	r22, r22
 4f2:	77 27       	eor	r23, r23
 4f4:	68 1b       	sub	r22, r24
 4f6:	79 0b       	sbc	r23, r25
 4f8:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <rightSpeed+0x1>
 4fc:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <rightSpeed>
 500:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
 504:	08 95       	ret

00000506 <plannedACRotate>:
 506:	bc 01       	movw	r22, r24
 508:	88 27       	eor	r24, r24
 50a:	99 27       	eor	r25, r25
 50c:	86 1b       	sub	r24, r22
 50e:	97 0b       	sbc	r25, r23
 510:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <leftSpeed+0x1>
 514:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <leftSpeed>
 518:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <rightSpeed+0x1>
 51c:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <rightSpeed>
 520:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
 524:	08 95       	ret

00000526 <brake>:
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
 532:	08 95       	ret

00000534 <calibration>:
	return newSpeed;
	
}

void calibration(int time)
{	
 534:	4f 92       	push	r4
 536:	5f 92       	push	r5
 538:	6f 92       	push	r6
 53a:	7f 92       	push	r7
 53c:	8f 92       	push	r8
 53e:	9f 92       	push	r9
 540:	af 92       	push	r10
 542:	bf 92       	push	r11
 544:	cf 92       	push	r12
 546:	df 92       	push	r13
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	a4 97       	sbiw	r28, 0x24	; 36
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	0f be       	out	0x3f, r0	; 63
 560:	cd bf       	out	0x3d, r28	; 61
 562:	5c 01       	movw	r10, r24
	serialPrintStr("Calibrating");
 564:	8d e8       	ldi	r24, 0x8D	; 141
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
	plannedCRotate(100);
 56c:	84 e6       	ldi	r24, 0x64	; 100
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 74 02 	call	0x4e8	; 0x4e8 <plannedCRotate>
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	4c 01       	movw	r8, r24
 57a:	6c 01       	movw	r12, r24
 57c:	f1 2c       	mov	r15, r1
	float upSum = 0,lowSum = 0;
	int sensorArray[sensorNum][2];

	for(int i = 0; i < sensorNum; i++)
	{
		sensorArray[i][0] = readADC(i);
 57e:	8f 2d       	mov	r24, r15
 580:	0e 94 51 00 	call	0xa2	; 0xa2 <readADC>
 584:	f6 01       	movw	r30, r12
 586:	91 83       	std	Z+1, r25	; 0x01
 588:	80 83       	st	Z, r24
		sensorArray[i][1] = readADC(i);
 58a:	8f 2d       	mov	r24, r15
 58c:	0e 94 51 00 	call	0xa2	; 0xa2 <readADC>
 590:	f6 01       	movw	r30, r12
 592:	93 83       	std	Z+3, r25	; 0x03
 594:	82 83       	std	Z+2, r24	; 0x02
 596:	f3 94       	inc	r15
 598:	f4 e0       	ldi	r31, 0x04	; 4
 59a:	cf 0e       	add	r12, r31
 59c:	d1 1c       	adc	r13, r1
	serialPrintStr("Calibrating");
	plannedCRotate(100);
	float upSum = 0,lowSum = 0;
	int sensorArray[sensorNum][2];

	for(int i = 0; i < sensorNum; i++)
 59e:	28 e0       	ldi	r18, 0x08	; 8
 5a0:	f2 12       	cpse	r15, r18
 5a2:	ed cf       	rjmp	.-38     	; 0x57e <calibration+0x4a>
		sensorArray[i][0] = readADC(i);
		sensorArray[i][1] = readADC(i);
	}
	

	int loopCounter = (int)(time * 1000 / 2.5);
 5a4:	88 ee       	ldi	r24, 0xE8	; 232
 5a6:	93 e0       	ldi	r25, 0x03	; 3
 5a8:	a8 9e       	mul	r10, r24
 5aa:	b0 01       	movw	r22, r0
 5ac:	a9 9e       	mul	r10, r25
 5ae:	70 0d       	add	r23, r0
 5b0:	b8 9e       	mul	r11, r24
 5b2:	70 0d       	add	r23, r0
 5b4:	11 24       	eor	r1, r1
 5b6:	07 2e       	mov	r0, r23
 5b8:	00 0c       	add	r0, r0
 5ba:	88 0b       	sbc	r24, r24
 5bc:	99 0b       	sbc	r25, r25
 5be:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
 5c2:	20 e0       	ldi	r18, 0x00	; 0
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	40 e2       	ldi	r20, 0x20	; 32
 5c8:	50 e4       	ldi	r21, 0x40	; 64
 5ca:	0e 94 43 05 	call	0xa86	; 0xa86 <__divsf3>
 5ce:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fixsfsi>
 5d2:	3b 01       	movw	r6, r22
	while(loopCounter)
 5d4:	67 2b       	or	r22, r23
 5d6:	09 f4       	brne	.+2      	; 0x5da <calibration+0xa6>
 5d8:	6f c0       	rjmp	.+222    	; 0x6b8 <calibration+0x184>
	{
		serialPrintStr("Calibrating");
 5da:	8d e8       	ldi	r24, 0x8D	; 141
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
		serialPrintStr("\n");
 5e2:	8e e7       	ldi	r24, 0x7E	; 126
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
 5ea:	64 01       	movw	r12, r8
 5ec:	10 e0       	ldi	r17, 0x00	; 0
		for(int i = 0; i < sensorNum; i++)
		{
			if(readADC(i)<sensorArray[i][0]) sensorArray[i][0]=readADC(i);
 5ee:	81 2f       	mov	r24, r17
 5f0:	0e 94 51 00 	call	0xa2	; 0xa2 <readADC>
 5f4:	56 01       	movw	r10, r12
 5f6:	f6 01       	movw	r30, r12
 5f8:	20 81       	ld	r18, Z
 5fa:	31 81       	ldd	r19, Z+1	; 0x01
 5fc:	82 17       	cp	r24, r18
 5fe:	93 07       	cpc	r25, r19
 600:	30 f4       	brcc	.+12     	; 0x60e <calibration+0xda>
 602:	81 2f       	mov	r24, r17
 604:	0e 94 51 00 	call	0xa2	; 0xa2 <readADC>
 608:	f6 01       	movw	r30, r12
 60a:	91 83       	std	Z+1, r25	; 0x01
 60c:	80 83       	st	Z, r24
			if(readADC(i)>sensorArray[i][1]) sensorArray[i][1]=readADC(i);
 60e:	81 2f       	mov	r24, r17
 610:	0e 94 51 00 	call	0xa2	; 0xa2 <readADC>
 614:	f5 01       	movw	r30, r10
 616:	22 81       	ldd	r18, Z+2	; 0x02
 618:	33 81       	ldd	r19, Z+3	; 0x03
 61a:	28 17       	cp	r18, r24
 61c:	39 07       	cpc	r19, r25
 61e:	30 f4       	brcc	.+12     	; 0x62c <calibration+0xf8>
 620:	81 2f       	mov	r24, r17
 622:	0e 94 51 00 	call	0xa2	; 0xa2 <readADC>
 626:	f5 01       	movw	r30, r10
 628:	93 83       	std	Z+3, r25	; 0x03
 62a:	82 83       	std	Z+2, r24	; 0x02
 62c:	1f 5f       	subi	r17, 0xFF	; 255
 62e:	f4 e0       	ldi	r31, 0x04	; 4
 630:	cf 0e       	add	r12, r31
 632:	d1 1c       	adc	r13, r1
	int loopCounter = (int)(time * 1000 / 2.5);
	while(loopCounter)
	{
		serialPrintStr("Calibrating");
		serialPrintStr("\n");
		for(int i = 0; i < sensorNum; i++)
 634:	18 30       	cpi	r17, 0x08	; 8
 636:	d9 f6       	brne	.-74     	; 0x5ee <calibration+0xba>
		{
			if(readADC(i)<sensorArray[i][0]) sensorArray[i][0]=readADC(i);
			if(readADC(i)>sensorArray[i][1]) sensorArray[i][1]=readADC(i);
		}
		loopCounter--;
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	62 1a       	sub	r6, r18
 63c:	71 08       	sbc	r7, r1
		sensorArray[i][1] = readADC(i);
	}
	

	int loopCounter = (int)(time * 1000 / 2.5);
	while(loopCounter)
 63e:	69 f6       	brne	.-102    	; 0x5da <calibration+0xa6>
 640:	3b c0       	rjmp	.+118    	; 0x6b8 <calibration+0x184>
		loopCounter--;

	}

	for(int i=0; i < sensorNum; i++)
	blackLimit[i] = (int)(sensorArray[i][0] + safety * (sensorArray[i][1] - sensorArray[i][0]));
 642:	f4 01       	movw	r30, r8
 644:	e0 80       	ld	r14, Z
 646:	f1 80       	ldd	r15, Z+1	; 0x01
 648:	62 81       	ldd	r22, Z+2	; 0x02
 64a:	73 81       	ldd	r23, Z+3	; 0x03
 64c:	6e 19       	sub	r22, r14
 64e:	7f 09       	sbc	r23, r15
 650:	07 2e       	mov	r0, r23
 652:	00 0c       	add	r0, r0
 654:	88 0b       	sbc	r24, r24
 656:	99 0b       	sbc	r25, r25
 658:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
 65c:	a3 01       	movw	r20, r6
 65e:	92 01       	movw	r18, r4
 660:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 664:	69 a3       	std	Y+33, r22	; 0x21
 666:	7a a3       	std	Y+34, r23	; 0x22
 668:	8b a3       	std	Y+35, r24	; 0x23
 66a:	9c a3       	std	Y+36, r25	; 0x24
 66c:	b7 01       	movw	r22, r14
 66e:	ff 0c       	add	r15, r15
 670:	88 0b       	sbc	r24, r24
 672:	99 0b       	sbc	r25, r25
 674:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
 678:	9b 01       	movw	r18, r22
 67a:	ac 01       	movw	r20, r24
 67c:	69 a1       	ldd	r22, Y+33	; 0x21
 67e:	7a a1       	ldd	r23, Y+34	; 0x22
 680:	8b a1       	ldd	r24, Y+35	; 0x23
 682:	9c a1       	ldd	r25, Y+36	; 0x24
 684:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
 688:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fixsfsi>
 68c:	f6 01       	movw	r30, r12
 68e:	61 93       	st	Z+, r22
 690:	71 93       	st	Z+, r23
 692:	6f 01       	movw	r12, r30
 694:	f4 e0       	ldi	r31, 0x04	; 4
 696:	8f 0e       	add	r8, r31
 698:	91 1c       	adc	r9, r1
		}
		loopCounter--;

	}

	for(int i=0; i < sensorNum; i++)
 69a:	a8 14       	cp	r10, r8
 69c:	b9 04       	cpc	r11, r9
 69e:	89 f6       	brne	.-94     	; 0x642 <calibration+0x10e>
	blackLimit[i] = (int)(sensorArray[i][0] + safety * (sensorArray[i][1] - sensorArray[i][0]));

	brake();
 6a0:	0e 94 93 02 	call	0x526	; 0x526 <brake>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a4:	2f ef       	ldi	r18, 0xFF	; 255
 6a6:	83 ed       	ldi	r24, 0xD3	; 211
 6a8:	90 e3       	ldi	r25, 0x30	; 48
 6aa:	21 50       	subi	r18, 0x01	; 1
 6ac:	80 40       	sbci	r24, 0x00	; 0
 6ae:	90 40       	sbci	r25, 0x00	; 0
 6b0:	e1 f7       	brne	.-8      	; 0x6aa <calibration+0x176>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <calibration+0x180>
 6b4:	00 00       	nop
	_delay_ms(1000);
 6b6:	13 c0       	rjmp	.+38     	; 0x6de <calibration+0x1aa>
		loopCounter--;

	}

	for(int i=0; i < sensorNum; i++)
	blackLimit[i] = (int)(sensorArray[i][0] + safety * (sensorArray[i][1] - sensorArray[i][0]));
 6b8:	40 90 60 00 	lds	r4, 0x0060	; 0x800060 <__data_start>
 6bc:	50 90 61 00 	lds	r5, 0x0061	; 0x800061 <__data_start+0x1>
 6c0:	60 90 62 00 	lds	r6, 0x0062	; 0x800062 <__data_start+0x2>
 6c4:	70 90 63 00 	lds	r7, 0x0063	; 0x800063 <__data_start+0x3>
 6c8:	0f 2e       	mov	r0, r31
 6ca:	f0 e8       	ldi	r31, 0x80	; 128
 6cc:	cf 2e       	mov	r12, r31
 6ce:	f1 e0       	ldi	r31, 0x01	; 1
 6d0:	df 2e       	mov	r13, r31
 6d2:	f0 2d       	mov	r31, r0
 6d4:	5e 01       	movw	r10, r28
 6d6:	e1 e2       	ldi	r30, 0x21	; 33
 6d8:	ae 0e       	add	r10, r30
 6da:	b1 1c       	adc	r11, r1
 6dc:	b2 cf       	rjmp	.-156    	; 0x642 <calibration+0x10e>

	brake();
	_delay_ms(1000);
 6de:	a4 96       	adiw	r28, 0x24	; 36
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	f8 94       	cli
 6e4:	de bf       	out	0x3e, r29	; 62
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	cd bf       	out	0x3d, r28	; 61
 6ea:	df 91       	pop	r29
 6ec:	cf 91       	pop	r28
 6ee:	1f 91       	pop	r17
 6f0:	ff 90       	pop	r15
 6f2:	ef 90       	pop	r14
 6f4:	df 90       	pop	r13
 6f6:	cf 90       	pop	r12
 6f8:	bf 90       	pop	r11
 6fa:	af 90       	pop	r10
 6fc:	9f 90       	pop	r9
 6fe:	8f 90       	pop	r8
 700:	7f 90       	pop	r7
 702:	6f 90       	pop	r6
 704:	5f 90       	pop	r5
 706:	4f 90       	pop	r4
 708:	08 95       	ret

0000070a <main>:
int stopThreshold = 20;
float safety = 0.35;

int main(void)
{
	initADC();
 70a:	0e 94 49 00 	call	0x92	; 0x92 <initADC>
	initPWM();
 70e:	0e 94 5f 00 	call	0xbe	; 0xbe <initPWM>
	initUSART();
 712:	0e 94 70 00 	call	0xe0	; 0xe0 <initUSART>
	
	DDRD = (1 << PIND4 | 1 << PIND5 | 1 << PIND7);
 716:	80 eb       	ldi	r24, 0xB0	; 176
 718:	81 bb       	out	0x11, r24	; 17
	DDRB = (1 << PINB3);
 71a:	88 e0       	ldi	r24, 0x08	; 8
 71c:	87 bb       	out	0x17, r24	; 23
	serialPrintStr("Calibration Start");
 71e:	89 e9       	ldi	r24, 0x99	; 153
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
	serialPrintStr("\n");
 726:	8e e7       	ldi	r24, 0x7E	; 126
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
	calibration(4);
 72e:	84 e0       	ldi	r24, 0x04	; 4
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 9a 02 	call	0x534	; 0x534 <calibration>
	serialPrintStr("Calibration Done");
 736:	8b ea       	ldi	r24, 0xAB	; 171
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
	serialPrintStr("\n");
 73e:	8e e7       	ldi	r24, 0x7E	; 126
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
    {
		sensorMapping();
		serialPrintStr("ERROR: ");
		serialPrintInt(error);
		serialPrintStr("\n");
		if(digitalReading[7] == 1)
 746:	c6 e6       	ldi	r28, 0x66	; 102
 748:	d1 e0       	ldi	r29, 0x01	; 1
	calibration(4);
	serialPrintStr("Calibration Done");
	serialPrintStr("\n");
    while (1)	
    {
		sensorMapping();
 74a:	0e 94 bd 00 	call	0x17a	; 0x17a <sensorMapping>
		serialPrintStr("ERROR: ");
 74e:	8c eb       	ldi	r24, 0xBC	; 188
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
		serialPrintInt(error);
 756:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <error>
 75a:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <error+0x1>
 75e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <error+0x2>
 762:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <error+0x3>
 766:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fixsfsi>
 76a:	cb 01       	movw	r24, r22
 76c:	0e 94 a0 00 	call	0x140	; 0x140 <serialPrintInt>
		serialPrintStr("\n");
 770:	8e e7       	ldi	r24, 0x7E	; 126
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
		if(digitalReading[7] == 1)
 778:	8e 85       	ldd	r24, Y+14	; 0x0e
 77a:	9f 85       	ldd	r25, Y+15	; 0x0f
 77c:	01 97       	sbiw	r24, 0x01	; 1
 77e:	09 f0       	breq	.+2      	; 0x782 <main+0x78>
 780:	41 c0       	rjmp	.+130    	; 0x804 <main+0xfa>
		{	//brake();
			//_delay_ms(150);
			motor(150,150);
 782:	66 e9       	ldi	r22, 0x96	; 150
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	86 e9       	ldi	r24, 0x96	; 150
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
 78e:	2f ef       	ldi	r18, 0xFF	; 255
 790:	81 ee       	ldi	r24, 0xE1	; 225
 792:	94 e0       	ldi	r25, 0x04	; 4
 794:	21 50       	subi	r18, 0x01	; 1
 796:	80 40       	sbci	r24, 0x00	; 0
 798:	90 40       	sbci	r25, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <main+0x8a>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <main+0x94>
 79e:	00 00       	nop
			_delay_ms(100);
			sensorMapping();
 7a0:	0e 94 bd 00 	call	0x17a	; 0x17a <sensorMapping>
			if(mappedValue != 100)
 7a4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <mappedValue>
 7a8:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <mappedValue+0x1>
 7ac:	84 36       	cpi	r24, 0x64	; 100
 7ae:	91 05       	cpc	r25, r1
 7b0:	49 f4       	brne	.+18     	; 0x7c4 <main+0xba>
 7b2:	58 c0       	rjmp	.+176    	; 0x864 <__stack+0x5>
			{
				while(digitalReading[3] != 0 || digitalReading[4] != 0)
				{
					serialPrintStr("Right Acute Turning");
 7b4:	84 ec       	ldi	r24, 0xC4	; 196
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
					plannedCRotate();
 7bc:	0e 94 74 02 	call	0x4e8	; 0x4e8 <plannedCRotate>
					sensorMapping();
 7c0:	0e 94 bd 00 	call	0x17a	; 0x17a <sensorMapping>
			motor(150,150);
			_delay_ms(100);
			sensorMapping();
			if(mappedValue != 100)
			{
				while(digitalReading[3] != 0 || digitalReading[4] != 0)
 7c4:	8e 81       	ldd	r24, Y+6	; 0x06
 7c6:	9f 81       	ldd	r25, Y+7	; 0x07
 7c8:	89 2b       	or	r24, r25
 7ca:	a1 f7       	brne	.-24     	; 0x7b4 <main+0xaa>
 7cc:	88 85       	ldd	r24, Y+8	; 0x08
 7ce:	99 85       	ldd	r25, Y+9	; 0x09
 7d0:	89 2b       	or	r24, r25
 7d2:	81 f7       	brne	.-32     	; 0x7b4 <main+0xaa>
					plannedCRotate();
					sensorMapping();
				}
				while(digitalReading[3] != 1)
				{
					serialPrintStr("Right Acute Turning");
 7d4:	84 ec       	ldi	r24, 0xC4	; 196
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
					plannedCRotate();
 7dc:	0e 94 74 02 	call	0x4e8	; 0x4e8 <plannedCRotate>
					sensorMapping();
 7e0:	0e 94 bd 00 	call	0x17a	; 0x17a <sensorMapping>
				{
					serialPrintStr("Right Acute Turning");
					plannedCRotate();
					sensorMapping();
				}
				while(digitalReading[3] != 1)
 7e4:	8e 81       	ldd	r24, Y+6	; 0x06
 7e6:	9f 81       	ldd	r25, Y+7	; 0x07
 7e8:	01 97       	sbiw	r24, 0x01	; 1
 7ea:	a1 f7       	brne	.-24     	; 0x7d4 <main+0xca>
				{
					serialPrintStr("Right Acute Turning");
					plannedCRotate();
					sensorMapping();
				}
				pid();
 7ec:	0e 94 80 01 	call	0x300	; 0x300 <pid>
				motor(leftSpeed, rightSpeed);
 7f0:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <rightSpeed>
 7f4:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <rightSpeed+0x1>
 7f8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <leftSpeed>
 7fc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <leftSpeed+0x1>
 800:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
				
			}
			
		}
		if(mappedValue != 100)
 804:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <mappedValue>
 808:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <mappedValue+0x1>
 80c:	84 36       	cpi	r24, 0x64	; 100
 80e:	91 05       	cpc	r25, r1
 810:	49 f1       	breq	.+82     	; 0x864 <__stack+0x5>
		{
			pid();
 812:	0e 94 80 01 	call	0x300	; 0x300 <pid>
			motor(leftSpeed, rightSpeed);
 816:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <rightSpeed>
 81a:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <rightSpeed+0x1>
 81e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <leftSpeed>
 822:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <leftSpeed+0x1>
 826:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
			serialPrintStr("Left: ");
 82a:	88 ed       	ldi	r24, 0xD8	; 216
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
			serialPrintInt(leftSpeed);
 832:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <leftSpeed>
 836:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <leftSpeed+0x1>
 83a:	0e 94 a0 00 	call	0x140	; 0x140 <serialPrintInt>
			serialPrintStr("\n");
 83e:	8e e7       	ldi	r24, 0x7E	; 126
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
			serialPrintStr("Right: ");
 846:	8f ed       	ldi	r24, 0xDF	; 223
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
			serialPrintInt(rightSpeed);
 84e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rightSpeed>
 852:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <rightSpeed+0x1>
 856:	0e 94 a0 00 	call	0x140	; 0x140 <serialPrintInt>
			serialPrintStr("\n");
 85a:	8e e7       	ldi	r24, 0x7E	; 126
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
 862:	73 cf       	rjmp	.-282    	; 0x74a <main+0x40>
		}
		
		else
		{
			if(left == 1 && right == 0)
 864:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <left>
 868:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <left+0x1>
 86c:	81 30       	cpi	r24, 0x01	; 1
 86e:	91 05       	cpc	r25, r1
 870:	41 f5       	brne	.+80     	; 0x8c2 <__stack+0x63>
 872:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <right>
 876:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <right+0x1>
 87a:	89 2b       	or	r24, r25
 87c:	09 f0       	breq	.+2      	; 0x880 <__stack+0x21>
 87e:	75 c0       	rjmp	.+234    	; 0x96a <__stack+0x10b>
			{
				serialPrintStr("Left Acute Turn\n");
 880:	87 ee       	ldi	r24, 0xE7	; 231
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
				while(digitalReading[3] != 1)
 888:	8e 81       	ldd	r24, Y+6	; 0x06
 88a:	9f 81       	ldd	r25, Y+7	; 0x07
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	61 f0       	breq	.+24     	; 0x8a8 <__stack+0x49>
				{
					serialPrintStr("Left Acute Turning");
 890:	88 ef       	ldi	r24, 0xF8	; 248
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
					plannedACRotate();
 898:	0e 94 83 02 	call	0x506	; 0x506 <plannedACRotate>
					sensorMapping();
 89c:	0e 94 bd 00 	call	0x17a	; 0x17a <sensorMapping>
		else
		{
			if(left == 1 && right == 0)
			{
				serialPrintStr("Left Acute Turn\n");
				while(digitalReading[3] != 1)
 8a0:	8e 81       	ldd	r24, Y+6	; 0x06
 8a2:	9f 81       	ldd	r25, Y+7	; 0x07
 8a4:	01 97       	sbiw	r24, 0x01	; 1
 8a6:	a1 f7       	brne	.-24     	; 0x890 <__stack+0x31>
				{
					serialPrintStr("Left Acute Turning");
					plannedACRotate();
					sensorMapping();
				}
				pid();
 8a8:	0e 94 80 01 	call	0x300	; 0x300 <pid>
				motor(leftSpeed, rightSpeed);
 8ac:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <rightSpeed>
 8b0:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <rightSpeed+0x1>
 8b4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <leftSpeed>
 8b8:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <leftSpeed+0x1>
 8bc:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
		}
		
		else
		{
			if(left == 1 && right == 0)
			{
 8c0:	44 cf       	rjmp	.-376    	; 0x74a <main+0x40>
				}
				pid();
				motor(leftSpeed, rightSpeed);
			}
			
			else if(left == 0 && right == 1)
 8c2:	89 2b       	or	r24, r25
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <__stack+0x69>
 8c6:	51 c0       	rjmp	.+162    	; 0x96a <__stack+0x10b>
 8c8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <right>
 8cc:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <right+0x1>
 8d0:	81 30       	cpi	r24, 0x01	; 1
 8d2:	91 05       	cpc	r25, r1
 8d4:	09 f5       	brne	.+66     	; 0x918 <__stack+0xb9>
			{
				serialPrintStr("Right Acute Turn\n");
 8d6:	8b e0       	ldi	r24, 0x0B	; 11
 8d8:	91 e0       	ldi	r25, 0x01	; 1
 8da:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
				while(digitalReading[3] != 1)
 8de:	8e 81       	ldd	r24, Y+6	; 0x06
 8e0:	9f 81       	ldd	r25, Y+7	; 0x07
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	61 f0       	breq	.+24     	; 0x8fe <__stack+0x9f>
				{
					serialPrintStr("Right Acute Turning");
 8e6:	84 ec       	ldi	r24, 0xC4	; 196
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
					plannedCRotate();
 8ee:	0e 94 74 02 	call	0x4e8	; 0x4e8 <plannedCRotate>
					sensorMapping();
 8f2:	0e 94 bd 00 	call	0x17a	; 0x17a <sensorMapping>
			}
			
			else if(left == 0 && right == 1)
			{
				serialPrintStr("Right Acute Turn\n");
				while(digitalReading[3] != 1)
 8f6:	8e 81       	ldd	r24, Y+6	; 0x06
 8f8:	9f 81       	ldd	r25, Y+7	; 0x07
 8fa:	01 97       	sbiw	r24, 0x01	; 1
 8fc:	a1 f7       	brne	.-24     	; 0x8e6 <__stack+0x87>
				{
					serialPrintStr("Right Acute Turning");
					plannedCRotate();
					sensorMapping();
				}
				pid();
 8fe:	0e 94 80 01 	call	0x300	; 0x300 <pid>
				motor(leftSpeed, rightSpeed);
 902:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <rightSpeed>
 906:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <rightSpeed+0x1>
 90a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <leftSpeed>
 90e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <leftSpeed+0x1>
 912:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
				pid();
				motor(leftSpeed, rightSpeed);
			}
			
			else if(left == 0 && right == 1)
			{
 916:	19 cf       	rjmp	.-462    	; 0x74a <main+0x40>
				}
				pid();
				motor(leftSpeed, rightSpeed);
			}
			
			else if(left == 0 && right == 0)
 918:	89 2b       	or	r24, r25
 91a:	39 f5       	brne	.+78     	; 0x96a <__stack+0x10b>
			{	
				serialPrintStr("Line gap run");
 91c:	8d e1       	ldi	r24, 0x1D	; 29
 91e:	91 e0       	ldi	r25, 0x01	; 1
 920:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
				while(mappedValue == 100)
 924:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <mappedValue>
 928:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <mappedValue+0x1>
 92c:	84 36       	cpi	r24, 0x64	; 100
 92e:	91 05       	cpc	r25, r1
 930:	79 f4       	brne	.+30     	; 0x950 <__stack+0xf1>
				{
					motor(sSpeed, sSpeed);
 932:	68 ec       	ldi	r22, 0xC8	; 200
 934:	70 e0       	ldi	r23, 0x00	; 0
 936:	88 ec       	ldi	r24, 0xC8	; 200
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
					sensorMapping();
 93e:	0e 94 bd 00 	call	0x17a	; 0x17a <sensorMapping>
			}
			
			else if(left == 0 && right == 0)
			{	
				serialPrintStr("Line gap run");
				while(mappedValue == 100)
 942:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <mappedValue>
 946:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <mappedValue+0x1>
 94a:	84 36       	cpi	r24, 0x64	; 100
 94c:	91 05       	cpc	r25, r1
 94e:	89 f3       	breq	.-30     	; 0x932 <__stack+0xd3>
				{
					motor(sSpeed, sSpeed);
					sensorMapping();
				}
				pid();
 950:	0e 94 80 01 	call	0x300	; 0x300 <pid>
				motor(leftSpeed, rightSpeed);
 954:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <rightSpeed>
 958:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <rightSpeed+0x1>
 95c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <leftSpeed>
 960:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <leftSpeed+0x1>
 964:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
				pid();
				motor(leftSpeed, rightSpeed);
			}
			
			else if(left == 0 && right == 0)
			{	
 968:	f0 ce       	rjmp	.-544    	; 0x74a <main+0x40>
				
			}	
			
			else
			{
				serialPrintStr("Right default turn\n");
 96a:	8a e2       	ldi	r24, 0x2A	; 42
 96c:	91 e0       	ldi	r25, 0x01	; 1
 96e:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
				while(digitalReading[3] != 1)
 972:	8e 81       	ldd	r24, Y+6	; 0x06
 974:	9f 81       	ldd	r25, Y+7	; 0x07
 976:	01 97       	sbiw	r24, 0x01	; 1
 978:	61 f0       	breq	.+24     	; 0x992 <__stack+0x133>
				{
					serialPrintStr("Right default Turning");
 97a:	8e e3       	ldi	r24, 0x3E	; 62
 97c:	91 e0       	ldi	r25, 0x01	; 1
 97e:	0e 94 7e 00 	call	0xfc	; 0xfc <serialPrintStr>
					plannedCRotate();
 982:	0e 94 74 02 	call	0x4e8	; 0x4e8 <plannedCRotate>
					sensorMapping();
 986:	0e 94 bd 00 	call	0x17a	; 0x17a <sensorMapping>
			}	
			
			else
			{
				serialPrintStr("Right default turn\n");
				while(digitalReading[3] != 1)
 98a:	8e 81       	ldd	r24, Y+6	; 0x06
 98c:	9f 81       	ldd	r25, Y+7	; 0x07
 98e:	01 97       	sbiw	r24, 0x01	; 1
 990:	a1 f7       	brne	.-24     	; 0x97a <__stack+0x11b>
				{
					serialPrintStr("Right default Turning");
					plannedCRotate();
					sensorMapping();
				}
				pid();
 992:	0e 94 80 01 	call	0x300	; 0x300 <pid>
				motor(leftSpeed, rightSpeed);
 996:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <rightSpeed>
 99a:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <rightSpeed+0x1>
 99e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <leftSpeed>
 9a2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <leftSpeed+0x1>
 9a6:	0e 94 46 02 	call	0x48c	; 0x48c <motor>
 9aa:	cf ce       	rjmp	.-610    	; 0x74a <main+0x40>

000009ac <__subsf3>:
 9ac:	50 58       	subi	r21, 0x80	; 128

000009ae <__addsf3>:
 9ae:	bb 27       	eor	r27, r27
 9b0:	aa 27       	eor	r26, r26
 9b2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3x>
 9b6:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_round>
 9ba:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_pscA>
 9be:	38 f0       	brcs	.+14     	; 0x9ce <__addsf3+0x20>
 9c0:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscB>
 9c4:	20 f0       	brcs	.+8      	; 0x9ce <__addsf3+0x20>
 9c6:	39 f4       	brne	.+14     	; 0x9d6 <__addsf3+0x28>
 9c8:	9f 3f       	cpi	r25, 0xFF	; 255
 9ca:	19 f4       	brne	.+6      	; 0x9d2 <__addsf3+0x24>
 9cc:	26 f4       	brtc	.+8      	; 0x9d6 <__addsf3+0x28>
 9ce:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__fp_nan>
 9d2:	0e f4       	brtc	.+2      	; 0x9d6 <__addsf3+0x28>
 9d4:	e0 95       	com	r30
 9d6:	e7 fb       	bst	r30, 7
 9d8:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>

000009dc <__addsf3x>:
 9dc:	e9 2f       	mov	r30, r25
 9de:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_split3>
 9e2:	58 f3       	brcs	.-42     	; 0x9ba <__addsf3+0xc>
 9e4:	ba 17       	cp	r27, r26
 9e6:	62 07       	cpc	r22, r18
 9e8:	73 07       	cpc	r23, r19
 9ea:	84 07       	cpc	r24, r20
 9ec:	95 07       	cpc	r25, r21
 9ee:	20 f0       	brcs	.+8      	; 0x9f8 <__addsf3x+0x1c>
 9f0:	79 f4       	brne	.+30     	; 0xa10 <__addsf3x+0x34>
 9f2:	a6 f5       	brtc	.+104    	; 0xa5c <__addsf3x+0x80>
 9f4:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_zero>
 9f8:	0e f4       	brtc	.+2      	; 0x9fc <__addsf3x+0x20>
 9fa:	e0 95       	com	r30
 9fc:	0b 2e       	mov	r0, r27
 9fe:	ba 2f       	mov	r27, r26
 a00:	a0 2d       	mov	r26, r0
 a02:	0b 01       	movw	r0, r22
 a04:	b9 01       	movw	r22, r18
 a06:	90 01       	movw	r18, r0
 a08:	0c 01       	movw	r0, r24
 a0a:	ca 01       	movw	r24, r20
 a0c:	a0 01       	movw	r20, r0
 a0e:	11 24       	eor	r1, r1
 a10:	ff 27       	eor	r31, r31
 a12:	59 1b       	sub	r21, r25
 a14:	99 f0       	breq	.+38     	; 0xa3c <__addsf3x+0x60>
 a16:	59 3f       	cpi	r21, 0xF9	; 249
 a18:	50 f4       	brcc	.+20     	; 0xa2e <__addsf3x+0x52>
 a1a:	50 3e       	cpi	r21, 0xE0	; 224
 a1c:	68 f1       	brcs	.+90     	; 0xa78 <__addsf3x+0x9c>
 a1e:	1a 16       	cp	r1, r26
 a20:	f0 40       	sbci	r31, 0x00	; 0
 a22:	a2 2f       	mov	r26, r18
 a24:	23 2f       	mov	r18, r19
 a26:	34 2f       	mov	r19, r20
 a28:	44 27       	eor	r20, r20
 a2a:	58 5f       	subi	r21, 0xF8	; 248
 a2c:	f3 cf       	rjmp	.-26     	; 0xa14 <__addsf3x+0x38>
 a2e:	46 95       	lsr	r20
 a30:	37 95       	ror	r19
 a32:	27 95       	ror	r18
 a34:	a7 95       	ror	r26
 a36:	f0 40       	sbci	r31, 0x00	; 0
 a38:	53 95       	inc	r21
 a3a:	c9 f7       	brne	.-14     	; 0xa2e <__addsf3x+0x52>
 a3c:	7e f4       	brtc	.+30     	; 0xa5c <__addsf3x+0x80>
 a3e:	1f 16       	cp	r1, r31
 a40:	ba 0b       	sbc	r27, r26
 a42:	62 0b       	sbc	r22, r18
 a44:	73 0b       	sbc	r23, r19
 a46:	84 0b       	sbc	r24, r20
 a48:	ba f0       	brmi	.+46     	; 0xa78 <__addsf3x+0x9c>
 a4a:	91 50       	subi	r25, 0x01	; 1
 a4c:	a1 f0       	breq	.+40     	; 0xa76 <__addsf3x+0x9a>
 a4e:	ff 0f       	add	r31, r31
 a50:	bb 1f       	adc	r27, r27
 a52:	66 1f       	adc	r22, r22
 a54:	77 1f       	adc	r23, r23
 a56:	88 1f       	adc	r24, r24
 a58:	c2 f7       	brpl	.-16     	; 0xa4a <__addsf3x+0x6e>
 a5a:	0e c0       	rjmp	.+28     	; 0xa78 <__addsf3x+0x9c>
 a5c:	ba 0f       	add	r27, r26
 a5e:	62 1f       	adc	r22, r18
 a60:	73 1f       	adc	r23, r19
 a62:	84 1f       	adc	r24, r20
 a64:	48 f4       	brcc	.+18     	; 0xa78 <__addsf3x+0x9c>
 a66:	87 95       	ror	r24
 a68:	77 95       	ror	r23
 a6a:	67 95       	ror	r22
 a6c:	b7 95       	ror	r27
 a6e:	f7 95       	ror	r31
 a70:	9e 3f       	cpi	r25, 0xFE	; 254
 a72:	08 f0       	brcs	.+2      	; 0xa76 <__addsf3x+0x9a>
 a74:	b0 cf       	rjmp	.-160    	; 0x9d6 <__addsf3+0x28>
 a76:	93 95       	inc	r25
 a78:	88 0f       	add	r24, r24
 a7a:	08 f0       	brcs	.+2      	; 0xa7e <__addsf3x+0xa2>
 a7c:	99 27       	eor	r25, r25
 a7e:	ee 0f       	add	r30, r30
 a80:	97 95       	ror	r25
 a82:	87 95       	ror	r24
 a84:	08 95       	ret

00000a86 <__divsf3>:
 a86:	0e 94 57 05 	call	0xaae	; 0xaae <__divsf3x>
 a8a:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_round>
 a8e:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscB>
 a92:	58 f0       	brcs	.+22     	; 0xaaa <__divsf3+0x24>
 a94:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_pscA>
 a98:	40 f0       	brcs	.+16     	; 0xaaa <__divsf3+0x24>
 a9a:	29 f4       	brne	.+10     	; 0xaa6 <__divsf3+0x20>
 a9c:	5f 3f       	cpi	r21, 0xFF	; 255
 a9e:	29 f0       	breq	.+10     	; 0xaaa <__divsf3+0x24>
 aa0:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>
 aa4:	51 11       	cpse	r21, r1
 aa6:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
 aaa:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__fp_nan>

00000aae <__divsf3x>:
 aae:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_split3>
 ab2:	68 f3       	brcs	.-38     	; 0xa8e <__divsf3+0x8>

00000ab4 <__divsf3_pse>:
 ab4:	99 23       	and	r25, r25
 ab6:	b1 f3       	breq	.-20     	; 0xaa4 <__divsf3+0x1e>
 ab8:	55 23       	and	r21, r21
 aba:	91 f3       	breq	.-28     	; 0xaa0 <__divsf3+0x1a>
 abc:	95 1b       	sub	r25, r21
 abe:	55 0b       	sbc	r21, r21
 ac0:	bb 27       	eor	r27, r27
 ac2:	aa 27       	eor	r26, r26
 ac4:	62 17       	cp	r22, r18
 ac6:	73 07       	cpc	r23, r19
 ac8:	84 07       	cpc	r24, r20
 aca:	38 f0       	brcs	.+14     	; 0xada <__divsf3_pse+0x26>
 acc:	9f 5f       	subi	r25, 0xFF	; 255
 ace:	5f 4f       	sbci	r21, 0xFF	; 255
 ad0:	22 0f       	add	r18, r18
 ad2:	33 1f       	adc	r19, r19
 ad4:	44 1f       	adc	r20, r20
 ad6:	aa 1f       	adc	r26, r26
 ad8:	a9 f3       	breq	.-22     	; 0xac4 <__divsf3_pse+0x10>
 ada:	35 d0       	rcall	.+106    	; 0xb46 <__divsf3_pse+0x92>
 adc:	0e 2e       	mov	r0, r30
 ade:	3a f0       	brmi	.+14     	; 0xaee <__divsf3_pse+0x3a>
 ae0:	e0 e8       	ldi	r30, 0x80	; 128
 ae2:	32 d0       	rcall	.+100    	; 0xb48 <__divsf3_pse+0x94>
 ae4:	91 50       	subi	r25, 0x01	; 1
 ae6:	50 40       	sbci	r21, 0x00	; 0
 ae8:	e6 95       	lsr	r30
 aea:	00 1c       	adc	r0, r0
 aec:	ca f7       	brpl	.-14     	; 0xae0 <__divsf3_pse+0x2c>
 aee:	2b d0       	rcall	.+86     	; 0xb46 <__divsf3_pse+0x92>
 af0:	fe 2f       	mov	r31, r30
 af2:	29 d0       	rcall	.+82     	; 0xb46 <__divsf3_pse+0x92>
 af4:	66 0f       	add	r22, r22
 af6:	77 1f       	adc	r23, r23
 af8:	88 1f       	adc	r24, r24
 afa:	bb 1f       	adc	r27, r27
 afc:	26 17       	cp	r18, r22
 afe:	37 07       	cpc	r19, r23
 b00:	48 07       	cpc	r20, r24
 b02:	ab 07       	cpc	r26, r27
 b04:	b0 e8       	ldi	r27, 0x80	; 128
 b06:	09 f0       	breq	.+2      	; 0xb0a <__divsf3_pse+0x56>
 b08:	bb 0b       	sbc	r27, r27
 b0a:	80 2d       	mov	r24, r0
 b0c:	bf 01       	movw	r22, r30
 b0e:	ff 27       	eor	r31, r31
 b10:	93 58       	subi	r25, 0x83	; 131
 b12:	5f 4f       	sbci	r21, 0xFF	; 255
 b14:	3a f0       	brmi	.+14     	; 0xb24 <__divsf3_pse+0x70>
 b16:	9e 3f       	cpi	r25, 0xFE	; 254
 b18:	51 05       	cpc	r21, r1
 b1a:	78 f0       	brcs	.+30     	; 0xb3a <__divsf3_pse+0x86>
 b1c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>
 b20:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
 b24:	5f 3f       	cpi	r21, 0xFF	; 255
 b26:	e4 f3       	brlt	.-8      	; 0xb20 <__divsf3_pse+0x6c>
 b28:	98 3e       	cpi	r25, 0xE8	; 232
 b2a:	d4 f3       	brlt	.-12     	; 0xb20 <__divsf3_pse+0x6c>
 b2c:	86 95       	lsr	r24
 b2e:	77 95       	ror	r23
 b30:	67 95       	ror	r22
 b32:	b7 95       	ror	r27
 b34:	f7 95       	ror	r31
 b36:	9f 5f       	subi	r25, 0xFF	; 255
 b38:	c9 f7       	brne	.-14     	; 0xb2c <__divsf3_pse+0x78>
 b3a:	88 0f       	add	r24, r24
 b3c:	91 1d       	adc	r25, r1
 b3e:	96 95       	lsr	r25
 b40:	87 95       	ror	r24
 b42:	97 f9       	bld	r25, 7
 b44:	08 95       	ret
 b46:	e1 e0       	ldi	r30, 0x01	; 1
 b48:	66 0f       	add	r22, r22
 b4a:	77 1f       	adc	r23, r23
 b4c:	88 1f       	adc	r24, r24
 b4e:	bb 1f       	adc	r27, r27
 b50:	62 17       	cp	r22, r18
 b52:	73 07       	cpc	r23, r19
 b54:	84 07       	cpc	r24, r20
 b56:	ba 07       	cpc	r27, r26
 b58:	20 f0       	brcs	.+8      	; 0xb62 <__divsf3_pse+0xae>
 b5a:	62 1b       	sub	r22, r18
 b5c:	73 0b       	sbc	r23, r19
 b5e:	84 0b       	sbc	r24, r20
 b60:	ba 0b       	sbc	r27, r26
 b62:	ee 1f       	adc	r30, r30
 b64:	88 f7       	brcc	.-30     	; 0xb48 <__divsf3_pse+0x94>
 b66:	e0 95       	com	r30
 b68:	08 95       	ret

00000b6a <__fixsfsi>:
 b6a:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fixunssfsi>
 b6e:	68 94       	set
 b70:	b1 11       	cpse	r27, r1
 b72:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
 b76:	08 95       	ret

00000b78 <__fixunssfsi>:
 b78:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fp_splitA>
 b7c:	88 f0       	brcs	.+34     	; 0xba0 <__fixunssfsi+0x28>
 b7e:	9f 57       	subi	r25, 0x7F	; 127
 b80:	98 f0       	brcs	.+38     	; 0xba8 <__fixunssfsi+0x30>
 b82:	b9 2f       	mov	r27, r25
 b84:	99 27       	eor	r25, r25
 b86:	b7 51       	subi	r27, 0x17	; 23
 b88:	b0 f0       	brcs	.+44     	; 0xbb6 <__fixunssfsi+0x3e>
 b8a:	e1 f0       	breq	.+56     	; 0xbc4 <__fixunssfsi+0x4c>
 b8c:	66 0f       	add	r22, r22
 b8e:	77 1f       	adc	r23, r23
 b90:	88 1f       	adc	r24, r24
 b92:	99 1f       	adc	r25, r25
 b94:	1a f0       	brmi	.+6      	; 0xb9c <__fixunssfsi+0x24>
 b96:	ba 95       	dec	r27
 b98:	c9 f7       	brne	.-14     	; 0xb8c <__fixunssfsi+0x14>
 b9a:	14 c0       	rjmp	.+40     	; 0xbc4 <__fixunssfsi+0x4c>
 b9c:	b1 30       	cpi	r27, 0x01	; 1
 b9e:	91 f0       	breq	.+36     	; 0xbc4 <__fixunssfsi+0x4c>
 ba0:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_zero>
 ba4:	b1 e0       	ldi	r27, 0x01	; 1
 ba6:	08 95       	ret
 ba8:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_zero>
 bac:	67 2f       	mov	r22, r23
 bae:	78 2f       	mov	r23, r24
 bb0:	88 27       	eor	r24, r24
 bb2:	b8 5f       	subi	r27, 0xF8	; 248
 bb4:	39 f0       	breq	.+14     	; 0xbc4 <__fixunssfsi+0x4c>
 bb6:	b9 3f       	cpi	r27, 0xF9	; 249
 bb8:	cc f3       	brlt	.-14     	; 0xbac <__fixunssfsi+0x34>
 bba:	86 95       	lsr	r24
 bbc:	77 95       	ror	r23
 bbe:	67 95       	ror	r22
 bc0:	b3 95       	inc	r27
 bc2:	d9 f7       	brne	.-10     	; 0xbba <__fixunssfsi+0x42>
 bc4:	3e f4       	brtc	.+14     	; 0xbd4 <__fixunssfsi+0x5c>
 bc6:	90 95       	com	r25
 bc8:	80 95       	com	r24
 bca:	70 95       	com	r23
 bcc:	61 95       	neg	r22
 bce:	7f 4f       	sbci	r23, 0xFF	; 255
 bd0:	8f 4f       	sbci	r24, 0xFF	; 255
 bd2:	9f 4f       	sbci	r25, 0xFF	; 255
 bd4:	08 95       	ret

00000bd6 <__floatunsisf>:
 bd6:	e8 94       	clt
 bd8:	09 c0       	rjmp	.+18     	; 0xbec <__floatsisf+0x12>

00000bda <__floatsisf>:
 bda:	97 fb       	bst	r25, 7
 bdc:	3e f4       	brtc	.+14     	; 0xbec <__floatsisf+0x12>
 bde:	90 95       	com	r25
 be0:	80 95       	com	r24
 be2:	70 95       	com	r23
 be4:	61 95       	neg	r22
 be6:	7f 4f       	sbci	r23, 0xFF	; 255
 be8:	8f 4f       	sbci	r24, 0xFF	; 255
 bea:	9f 4f       	sbci	r25, 0xFF	; 255
 bec:	99 23       	and	r25, r25
 bee:	a9 f0       	breq	.+42     	; 0xc1a <__floatsisf+0x40>
 bf0:	f9 2f       	mov	r31, r25
 bf2:	96 e9       	ldi	r25, 0x96	; 150
 bf4:	bb 27       	eor	r27, r27
 bf6:	93 95       	inc	r25
 bf8:	f6 95       	lsr	r31
 bfa:	87 95       	ror	r24
 bfc:	77 95       	ror	r23
 bfe:	67 95       	ror	r22
 c00:	b7 95       	ror	r27
 c02:	f1 11       	cpse	r31, r1
 c04:	f8 cf       	rjmp	.-16     	; 0xbf6 <__floatsisf+0x1c>
 c06:	fa f4       	brpl	.+62     	; 0xc46 <__floatsisf+0x6c>
 c08:	bb 0f       	add	r27, r27
 c0a:	11 f4       	brne	.+4      	; 0xc10 <__floatsisf+0x36>
 c0c:	60 ff       	sbrs	r22, 0
 c0e:	1b c0       	rjmp	.+54     	; 0xc46 <__floatsisf+0x6c>
 c10:	6f 5f       	subi	r22, 0xFF	; 255
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	8f 4f       	sbci	r24, 0xFF	; 255
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	16 c0       	rjmp	.+44     	; 0xc46 <__floatsisf+0x6c>
 c1a:	88 23       	and	r24, r24
 c1c:	11 f0       	breq	.+4      	; 0xc22 <__floatsisf+0x48>
 c1e:	96 e9       	ldi	r25, 0x96	; 150
 c20:	11 c0       	rjmp	.+34     	; 0xc44 <__floatsisf+0x6a>
 c22:	77 23       	and	r23, r23
 c24:	21 f0       	breq	.+8      	; 0xc2e <__floatsisf+0x54>
 c26:	9e e8       	ldi	r25, 0x8E	; 142
 c28:	87 2f       	mov	r24, r23
 c2a:	76 2f       	mov	r23, r22
 c2c:	05 c0       	rjmp	.+10     	; 0xc38 <__floatsisf+0x5e>
 c2e:	66 23       	and	r22, r22
 c30:	71 f0       	breq	.+28     	; 0xc4e <__floatsisf+0x74>
 c32:	96 e8       	ldi	r25, 0x86	; 134
 c34:	86 2f       	mov	r24, r22
 c36:	70 e0       	ldi	r23, 0x00	; 0
 c38:	60 e0       	ldi	r22, 0x00	; 0
 c3a:	2a f0       	brmi	.+10     	; 0xc46 <__floatsisf+0x6c>
 c3c:	9a 95       	dec	r25
 c3e:	66 0f       	add	r22, r22
 c40:	77 1f       	adc	r23, r23
 c42:	88 1f       	adc	r24, r24
 c44:	da f7       	brpl	.-10     	; 0xc3c <__floatsisf+0x62>
 c46:	88 0f       	add	r24, r24
 c48:	96 95       	lsr	r25
 c4a:	87 95       	ror	r24
 c4c:	97 f9       	bld	r25, 7
 c4e:	08 95       	ret

00000c50 <__fp_inf>:
 c50:	97 f9       	bld	r25, 7
 c52:	9f 67       	ori	r25, 0x7F	; 127
 c54:	80 e8       	ldi	r24, 0x80	; 128
 c56:	70 e0       	ldi	r23, 0x00	; 0
 c58:	60 e0       	ldi	r22, 0x00	; 0
 c5a:	08 95       	ret

00000c5c <__fp_nan>:
 c5c:	9f ef       	ldi	r25, 0xFF	; 255
 c5e:	80 ec       	ldi	r24, 0xC0	; 192
 c60:	08 95       	ret

00000c62 <__fp_pscA>:
 c62:	00 24       	eor	r0, r0
 c64:	0a 94       	dec	r0
 c66:	16 16       	cp	r1, r22
 c68:	17 06       	cpc	r1, r23
 c6a:	18 06       	cpc	r1, r24
 c6c:	09 06       	cpc	r0, r25
 c6e:	08 95       	ret

00000c70 <__fp_pscB>:
 c70:	00 24       	eor	r0, r0
 c72:	0a 94       	dec	r0
 c74:	12 16       	cp	r1, r18
 c76:	13 06       	cpc	r1, r19
 c78:	14 06       	cpc	r1, r20
 c7a:	05 06       	cpc	r0, r21
 c7c:	08 95       	ret

00000c7e <__fp_round>:
 c7e:	09 2e       	mov	r0, r25
 c80:	03 94       	inc	r0
 c82:	00 0c       	add	r0, r0
 c84:	11 f4       	brne	.+4      	; 0xc8a <__fp_round+0xc>
 c86:	88 23       	and	r24, r24
 c88:	52 f0       	brmi	.+20     	; 0xc9e <__fp_round+0x20>
 c8a:	bb 0f       	add	r27, r27
 c8c:	40 f4       	brcc	.+16     	; 0xc9e <__fp_round+0x20>
 c8e:	bf 2b       	or	r27, r31
 c90:	11 f4       	brne	.+4      	; 0xc96 <__fp_round+0x18>
 c92:	60 ff       	sbrs	r22, 0
 c94:	04 c0       	rjmp	.+8      	; 0xc9e <__fp_round+0x20>
 c96:	6f 5f       	subi	r22, 0xFF	; 255
 c98:	7f 4f       	sbci	r23, 0xFF	; 255
 c9a:	8f 4f       	sbci	r24, 0xFF	; 255
 c9c:	9f 4f       	sbci	r25, 0xFF	; 255
 c9e:	08 95       	ret

00000ca0 <__fp_split3>:
 ca0:	57 fd       	sbrc	r21, 7
 ca2:	90 58       	subi	r25, 0x80	; 128
 ca4:	44 0f       	add	r20, r20
 ca6:	55 1f       	adc	r21, r21
 ca8:	59 f0       	breq	.+22     	; 0xcc0 <__fp_splitA+0x10>
 caa:	5f 3f       	cpi	r21, 0xFF	; 255
 cac:	71 f0       	breq	.+28     	; 0xcca <__fp_splitA+0x1a>
 cae:	47 95       	ror	r20

00000cb0 <__fp_splitA>:
 cb0:	88 0f       	add	r24, r24
 cb2:	97 fb       	bst	r25, 7
 cb4:	99 1f       	adc	r25, r25
 cb6:	61 f0       	breq	.+24     	; 0xcd0 <__fp_splitA+0x20>
 cb8:	9f 3f       	cpi	r25, 0xFF	; 255
 cba:	79 f0       	breq	.+30     	; 0xcda <__fp_splitA+0x2a>
 cbc:	87 95       	ror	r24
 cbe:	08 95       	ret
 cc0:	12 16       	cp	r1, r18
 cc2:	13 06       	cpc	r1, r19
 cc4:	14 06       	cpc	r1, r20
 cc6:	55 1f       	adc	r21, r21
 cc8:	f2 cf       	rjmp	.-28     	; 0xcae <__fp_split3+0xe>
 cca:	46 95       	lsr	r20
 ccc:	f1 df       	rcall	.-30     	; 0xcb0 <__fp_splitA>
 cce:	08 c0       	rjmp	.+16     	; 0xce0 <__fp_splitA+0x30>
 cd0:	16 16       	cp	r1, r22
 cd2:	17 06       	cpc	r1, r23
 cd4:	18 06       	cpc	r1, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	f1 cf       	rjmp	.-30     	; 0xcbc <__fp_splitA+0xc>
 cda:	86 95       	lsr	r24
 cdc:	71 05       	cpc	r23, r1
 cde:	61 05       	cpc	r22, r1
 ce0:	08 94       	sec
 ce2:	08 95       	ret

00000ce4 <__fp_zero>:
 ce4:	e8 94       	clt

00000ce6 <__fp_szero>:
 ce6:	bb 27       	eor	r27, r27
 ce8:	66 27       	eor	r22, r22
 cea:	77 27       	eor	r23, r23
 cec:	cb 01       	movw	r24, r22
 cee:	97 f9       	bld	r25, 7
 cf0:	08 95       	ret

00000cf2 <__mulsf3>:
 cf2:	0e 94 8c 06 	call	0xd18	; 0xd18 <__mulsf3x>
 cf6:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_round>
 cfa:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_pscA>
 cfe:	38 f0       	brcs	.+14     	; 0xd0e <__mulsf3+0x1c>
 d00:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscB>
 d04:	20 f0       	brcs	.+8      	; 0xd0e <__mulsf3+0x1c>
 d06:	95 23       	and	r25, r21
 d08:	11 f0       	breq	.+4      	; 0xd0e <__mulsf3+0x1c>
 d0a:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>
 d0e:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__fp_nan>
 d12:	11 24       	eor	r1, r1
 d14:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>

00000d18 <__mulsf3x>:
 d18:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_split3>
 d1c:	70 f3       	brcs	.-36     	; 0xcfa <__mulsf3+0x8>

00000d1e <__mulsf3_pse>:
 d1e:	95 9f       	mul	r25, r21
 d20:	c1 f3       	breq	.-16     	; 0xd12 <__mulsf3+0x20>
 d22:	95 0f       	add	r25, r21
 d24:	50 e0       	ldi	r21, 0x00	; 0
 d26:	55 1f       	adc	r21, r21
 d28:	62 9f       	mul	r22, r18
 d2a:	f0 01       	movw	r30, r0
 d2c:	72 9f       	mul	r23, r18
 d2e:	bb 27       	eor	r27, r27
 d30:	f0 0d       	add	r31, r0
 d32:	b1 1d       	adc	r27, r1
 d34:	63 9f       	mul	r22, r19
 d36:	aa 27       	eor	r26, r26
 d38:	f0 0d       	add	r31, r0
 d3a:	b1 1d       	adc	r27, r1
 d3c:	aa 1f       	adc	r26, r26
 d3e:	64 9f       	mul	r22, r20
 d40:	66 27       	eor	r22, r22
 d42:	b0 0d       	add	r27, r0
 d44:	a1 1d       	adc	r26, r1
 d46:	66 1f       	adc	r22, r22
 d48:	82 9f       	mul	r24, r18
 d4a:	22 27       	eor	r18, r18
 d4c:	b0 0d       	add	r27, r0
 d4e:	a1 1d       	adc	r26, r1
 d50:	62 1f       	adc	r22, r18
 d52:	73 9f       	mul	r23, r19
 d54:	b0 0d       	add	r27, r0
 d56:	a1 1d       	adc	r26, r1
 d58:	62 1f       	adc	r22, r18
 d5a:	83 9f       	mul	r24, r19
 d5c:	a0 0d       	add	r26, r0
 d5e:	61 1d       	adc	r22, r1
 d60:	22 1f       	adc	r18, r18
 d62:	74 9f       	mul	r23, r20
 d64:	33 27       	eor	r19, r19
 d66:	a0 0d       	add	r26, r0
 d68:	61 1d       	adc	r22, r1
 d6a:	23 1f       	adc	r18, r19
 d6c:	84 9f       	mul	r24, r20
 d6e:	60 0d       	add	r22, r0
 d70:	21 1d       	adc	r18, r1
 d72:	82 2f       	mov	r24, r18
 d74:	76 2f       	mov	r23, r22
 d76:	6a 2f       	mov	r22, r26
 d78:	11 24       	eor	r1, r1
 d7a:	9f 57       	subi	r25, 0x7F	; 127
 d7c:	50 40       	sbci	r21, 0x00	; 0
 d7e:	9a f0       	brmi	.+38     	; 0xda6 <__mulsf3_pse+0x88>
 d80:	f1 f0       	breq	.+60     	; 0xdbe <__mulsf3_pse+0xa0>
 d82:	88 23       	and	r24, r24
 d84:	4a f0       	brmi	.+18     	; 0xd98 <__mulsf3_pse+0x7a>
 d86:	ee 0f       	add	r30, r30
 d88:	ff 1f       	adc	r31, r31
 d8a:	bb 1f       	adc	r27, r27
 d8c:	66 1f       	adc	r22, r22
 d8e:	77 1f       	adc	r23, r23
 d90:	88 1f       	adc	r24, r24
 d92:	91 50       	subi	r25, 0x01	; 1
 d94:	50 40       	sbci	r21, 0x00	; 0
 d96:	a9 f7       	brne	.-22     	; 0xd82 <__mulsf3_pse+0x64>
 d98:	9e 3f       	cpi	r25, 0xFE	; 254
 d9a:	51 05       	cpc	r21, r1
 d9c:	80 f0       	brcs	.+32     	; 0xdbe <__mulsf3_pse+0xa0>
 d9e:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>
 da2:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
 da6:	5f 3f       	cpi	r21, 0xFF	; 255
 da8:	e4 f3       	brlt	.-8      	; 0xda2 <__mulsf3_pse+0x84>
 daa:	98 3e       	cpi	r25, 0xE8	; 232
 dac:	d4 f3       	brlt	.-12     	; 0xda2 <__mulsf3_pse+0x84>
 dae:	86 95       	lsr	r24
 db0:	77 95       	ror	r23
 db2:	67 95       	ror	r22
 db4:	b7 95       	ror	r27
 db6:	f7 95       	ror	r31
 db8:	e7 95       	ror	r30
 dba:	9f 5f       	subi	r25, 0xFF	; 255
 dbc:	c1 f7       	brne	.-16     	; 0xdae <__mulsf3_pse+0x90>
 dbe:	fe 2b       	or	r31, r30
 dc0:	88 0f       	add	r24, r24
 dc2:	91 1d       	adc	r25, r1
 dc4:	96 95       	lsr	r25
 dc6:	87 95       	ror	r24
 dc8:	97 f9       	bld	r25, 7
 dca:	08 95       	ret

00000dcc <__divmodhi4>:
 dcc:	97 fb       	bst	r25, 7
 dce:	07 2e       	mov	r0, r23
 dd0:	16 f4       	brtc	.+4      	; 0xdd6 <__divmodhi4+0xa>
 dd2:	00 94       	com	r0
 dd4:	07 d0       	rcall	.+14     	; 0xde4 <__divmodhi4_neg1>
 dd6:	77 fd       	sbrc	r23, 7
 dd8:	09 d0       	rcall	.+18     	; 0xdec <__divmodhi4_neg2>
 dda:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__udivmodhi4>
 dde:	07 fc       	sbrc	r0, 7
 de0:	05 d0       	rcall	.+10     	; 0xdec <__divmodhi4_neg2>
 de2:	3e f4       	brtc	.+14     	; 0xdf2 <__divmodhi4_exit>

00000de4 <__divmodhi4_neg1>:
 de4:	90 95       	com	r25
 de6:	81 95       	neg	r24
 de8:	9f 4f       	sbci	r25, 0xFF	; 255
 dea:	08 95       	ret

00000dec <__divmodhi4_neg2>:
 dec:	70 95       	com	r23
 dee:	61 95       	neg	r22
 df0:	7f 4f       	sbci	r23, 0xFF	; 255

00000df2 <__divmodhi4_exit>:
 df2:	08 95       	ret

00000df4 <__udivmodhi4>:
 df4:	aa 1b       	sub	r26, r26
 df6:	bb 1b       	sub	r27, r27
 df8:	51 e1       	ldi	r21, 0x11	; 17
 dfa:	07 c0       	rjmp	.+14     	; 0xe0a <__udivmodhi4_ep>

00000dfc <__udivmodhi4_loop>:
 dfc:	aa 1f       	adc	r26, r26
 dfe:	bb 1f       	adc	r27, r27
 e00:	a6 17       	cp	r26, r22
 e02:	b7 07       	cpc	r27, r23
 e04:	10 f0       	brcs	.+4      	; 0xe0a <__udivmodhi4_ep>
 e06:	a6 1b       	sub	r26, r22
 e08:	b7 0b       	sbc	r27, r23

00000e0a <__udivmodhi4_ep>:
 e0a:	88 1f       	adc	r24, r24
 e0c:	99 1f       	adc	r25, r25
 e0e:	5a 95       	dec	r21
 e10:	a9 f7       	brne	.-22     	; 0xdfc <__udivmodhi4_loop>
 e12:	80 95       	com	r24
 e14:	90 95       	com	r25
 e16:	bc 01       	movw	r22, r24
 e18:	cd 01       	movw	r24, r26
 e1a:	08 95       	ret

00000e1c <__itoa_ncheck>:
 e1c:	bb 27       	eor	r27, r27
 e1e:	4a 30       	cpi	r20, 0x0A	; 10
 e20:	31 f4       	brne	.+12     	; 0xe2e <__itoa_ncheck+0x12>
 e22:	99 23       	and	r25, r25
 e24:	22 f4       	brpl	.+8      	; 0xe2e <__itoa_ncheck+0x12>
 e26:	bd e2       	ldi	r27, 0x2D	; 45
 e28:	90 95       	com	r25
 e2a:	81 95       	neg	r24
 e2c:	9f 4f       	sbci	r25, 0xFF	; 255
 e2e:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__utoa_common>

00000e32 <__utoa_ncheck>:
 e32:	bb 27       	eor	r27, r27

00000e34 <__utoa_common>:
 e34:	fb 01       	movw	r30, r22
 e36:	55 27       	eor	r21, r21
 e38:	aa 27       	eor	r26, r26
 e3a:	88 0f       	add	r24, r24
 e3c:	99 1f       	adc	r25, r25
 e3e:	aa 1f       	adc	r26, r26
 e40:	a4 17       	cp	r26, r20
 e42:	10 f0       	brcs	.+4      	; 0xe48 <__utoa_common+0x14>
 e44:	a4 1b       	sub	r26, r20
 e46:	83 95       	inc	r24
 e48:	50 51       	subi	r21, 0x10	; 16
 e4a:	b9 f7       	brne	.-18     	; 0xe3a <__utoa_common+0x6>
 e4c:	a0 5d       	subi	r26, 0xD0	; 208
 e4e:	aa 33       	cpi	r26, 0x3A	; 58
 e50:	08 f0       	brcs	.+2      	; 0xe54 <__utoa_common+0x20>
 e52:	a9 5d       	subi	r26, 0xD9	; 217
 e54:	a1 93       	st	Z+, r26
 e56:	00 97       	sbiw	r24, 0x00	; 0
 e58:	79 f7       	brne	.-34     	; 0xe38 <__utoa_common+0x4>
 e5a:	b1 11       	cpse	r27, r1
 e5c:	b1 93       	st	Z+, r27
 e5e:	11 92       	st	Z+, r1
 e60:	cb 01       	movw	r24, r22
 e62:	0c 94 33 07 	jmp	0xe66	; 0xe66 <strrev>

00000e66 <strrev>:
 e66:	dc 01       	movw	r26, r24
 e68:	fc 01       	movw	r30, r24
 e6a:	67 2f       	mov	r22, r23
 e6c:	71 91       	ld	r23, Z+
 e6e:	77 23       	and	r23, r23
 e70:	e1 f7       	brne	.-8      	; 0xe6a <strrev+0x4>
 e72:	32 97       	sbiw	r30, 0x02	; 2
 e74:	04 c0       	rjmp	.+8      	; 0xe7e <strrev+0x18>
 e76:	7c 91       	ld	r23, X
 e78:	6d 93       	st	X+, r22
 e7a:	70 83       	st	Z, r23
 e7c:	62 91       	ld	r22, -Z
 e7e:	ae 17       	cp	r26, r30
 e80:	bf 07       	cpc	r27, r31
 e82:	c8 f3       	brcs	.-14     	; 0xe76 <strrev+0x10>
 e84:	08 95       	ret

00000e86 <_exit>:
 e86:	f8 94       	cli

00000e88 <__stop_program>:
 e88:	ff cf       	rjmp	.-2      	; 0xe88 <__stop_program>
